Int32 index_%X%, mod_index_%X%, outx_%X%, final_%X%;
Int64 out64_%X%;
Int32 eg_value_%X% = op_%X%_eg.value - ampmod[op_%X%.amp_mod_sens];
if (eg_value_%X% == 0) { final_%X% = 0; this.feedback=0; } else {
Int32 phase_%X% = (Int32)op_%X%.phase%_p%;
index_%X% = (eg_value_%X% >> Constants.FP_SHIFT);
mod_index_%X% = Data.dx7_voice_eg_ol_to_mod_index_table[index_%X% + 128];
mod_index_%X% += (Int32)(((Int64)(Data.dx7_voice_eg_ol_to_mod_index_table[index_%X% + 129] - mod_index_%X%) * (Int64)(eg_value_%X% & Constants.FP_MASK)) >> Constants.FP_SHIFT);
index_%X% = (Int32)((phase_%X% >> Constants.FP_TO_SINE_SHIFT) & Constants.SINE_MASK);
outx_%X% = Data.dx7_voice_sin_table[index_%X%];
out64_%X% = outx_%X% +
        (((Int64)(Data.dx7_voice_sin_table[index_%X% + 1] - outx_%X%) *
            (Int64)(phase_%X% & Constants.FP_TO_SINE_MASK)) >>
            (Constants.FP_SHIFT_PLUS_FP_TO_SINE_SHIFT));
this.feedback = (Int32)((((out64_%X% * (Int64)eg_value_%X%) >> Constants.FP_SHIFT) *
                    (Int64)this.feedback_multiplier) >> Constants.FP_SHIFT);
final_%X% = (Int32)(((Int64)mod_index_%X% * out64_%X%) >> Constants.FP_SHIFT); }